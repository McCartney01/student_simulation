[
    {
        "problem_id": "1105036924928643072",
        "question": "Find the product of all even numbers from 1 to n.\n\n### Input format:\n\nInput an integer n.\n\n### Output format:\n\nProduct of even numbers from 1 to n.\n\n### Input example:\n\n```in\n5\n```\n\n### Output example:\n\n```out\n8\n```",
        "desc": "This problem tests the student's ability to use traversal loops (specifically `for` loops) to iterate over a range of numbers, apply conditional logic to filter even numbers, and perform arithmetic operations to accumulate results (multiplication). It requires understanding of loop constructs, conditionals (`if` statements), and basic input/output handling in Python. The challenge also assesses the student's ability to translate a mathematical operation into a coding problem efficiently.",
        "program": "n=eval(input())\ni=1\nsum=1\nwhile i<=n:\n    if i%2==0:        \n        sum=sum*i\n    i=i+1\nprint(sum)",
        "error_desc": "No error."
    },
    {
        "problem_id": "1373614140640153600",
        "question": "### Problem Description:\n\nThis problem requires reading a string and extracting the numeric characters from it to form the largest possible integer, then outputting that integer.\n\n### Input Format:\n\nThe input consists of a single line with a string of arbitrary characters.\n\n### Output Format:\n\nExtract the numeric characters from the string, concatenate them to form the largest possible integer, and output it. If there are no numeric characters, print “no”.\n\n### Sample Input:\n\nHere is a sample input:\n\n```in\nssd923ck63,,01az..m\n```\n\n### Sample Output:\n\nHere is the corresponding output:\n\n```out\n9633210\n```\n\n### Sample Input:\n\nHere is a sample input:\n\n```in\nHello Python!\n```\n\n### Sample Output:\n\nHere is the corresponding output:\n\n```out\nno\n```",
        "desc": "The problem tests the ability to manipulate strings and involves extracting and sorting characters, specifically numerics, from a string. It requires understanding of string traversal, conditionally filtering characters, and basic sorting to form the highest possible number. Students need to demonstrate skills in string handling, conditional logic, and familiarity with Python list operations such as filtering and sorting.",
        "program": "s=list(input())\nt=\"\"\nfor i in range(0,len(s)):\n    if \"0\"<=s[i]<=\"9\":\n        t=t+s[i]\nprint(int(t))",
        "error_desc": "1. The student's code does not sort the extracted digits, which is needed to form the maximum integer.\n2. The code does not handle the case where there are no digit characters in the input, leading to a `ValueError` when trying to convert an empty string to an integer.\n3. If no digits are found, the required output is \"no\", but the student's code attempts to print an integer directly, without checking if any digits were extracted."
    },
    {
        "problem_id": "1339575355663007744",
        "question": "This problem requires determining the password strength based on the input password string (the string length must be greater than 6). Rule: The password can only contain uppercase letters, lowercase letters, numbers, and underscores. If it contains only one of these, the password strength is 1; if it contains two, the password strength is 2; if it contains three, the password strength is 3; if it contains all four, the password strength is 4.\n\n### Input Format:\n\nInput a string with a length greater than 6.\n\n### Output Format:\n\nOutput the password strength.\n\n### Input Example 1:\n\nHere is a set of inputs. For example:\n\n```in\n123456789\n```\n\n### Output Example 1:\n\nHere is the corresponding output. For example:\n\n```out\n1\n```\n\n### Input Example 2:\n\nHere is a set of inputs. For example:\n\n```in\nabcd666\n```\n\n### Output Example 2:\n\nHere is the corresponding output. For example:\n\n```out\n2\n```\n\n### Input Example 3:\n\nHere is a set of inputs. For example:\n\n```in\naBCD666\n```\n\n### Output Example 3:\n\nHere is the corresponding output. For example:\n\n```out\n3\n```\n\n### Input Example 4:\n\nHere is a set of inputs. For example:\n\n```in\naBCD_666\n```\n\n### Output Example 4:\n\nHere is the corresponding output. For example:\n\n```out\n4\n```",
        "desc": "This problem focuses on string manipulation and character classification in Python. It assesses the ability to iterate through strings, identify character types—such as uppercase, lowercase, numeric, and special characters—and use conditions to evaluate the presence of these types. The task requires understanding of string traversal, character-checking functions (`isupper()`, `islower()`, `isdigit()`), and conditional logic to determine password strength.",
        "program": "alist = list(input())\nnum = 0\nxiao = 0\nda = 0\nxia = 0\nfor i in alist:\n    if '9' >= i >= '0':\n        num = 1\n\n    elif 'z' >= i >= 'a':\n        xiao = 1\n\n    elif 'Z' >= i >= 'A':\n        da = 1\n\n    elif i == '_':\n        xia = 1\n\n\nprint(num + xiao + da + xia)",
        "error_desc": "No error."
    },
    {
        "problem_id": "1310752813874798592",
        "question": "(Health Application: Calculate BMI) Body Mass Index (BMI) is an index used to measure health levels based on weight. It is calculated by dividing the weight in kilograms by the square of the height in meters. Write a program that allows the user to input their weight in kilograms and height in meters.\n\n### Input Format:\n\nInput weight, height\n\n### Output Format:\n\nOutput the BMI value, rounded to 4 decimal places\n\n### Sample Input:\n\nHere is a sample input. For example:\n\n```in\n43.3\n1.27\n```\n\n### Sample Output:\n\nHere is the corresponding output. For example:\n\n```out\nBMI is 26.8461\n```",
        "desc": "This problem assesses understanding of basic operators and expressions in Python by requiring the student to perform arithmetic calculations using input values. It evaluates the ability to work with input functions and floating-point arithmetic, as well as the formatting of output to a specified number of decimal places. The task demands proficiency in constructing expressions and employing Python syntax for user interaction and formatted output.",
        "program": "weight=eval(input(\"\"))\nheight=eval(input(\"\"))\nbmi=weight/pow(height,2)\nprint(\"BMI is {:.4f}\".format(bmi))",
        "error_desc": "No error."
    },
    {
        "problem_id": "1368413024305811456",
        "question": "A user inputs a string `s` and two integers `m` and `n` in three separate lines. The output should be the substring of `s` that is located between positions `m` and `n` (including `m` but not including `n`, with `m < n`).\n\n### Input Format:\n\nFor example, the input is ’Python programming‘, 2, 5.\n\n### Output Format:\n\nFor example, the output is ’tho‘.\n\n### Input Example:\n\n```in\nPython programming\n2\n5\n```\n\n### Output Example:\n\nProvide the corresponding output here. For example:\n\n```out\ntho\n```",
        "desc": "This problem tests the student's understanding of string slicing in Python, which is a fundamental concept in handling string data. It requires the ability to manipulate strings by providing a substring using specified start and end positions. The task emphasizes the importance of correctly indexing and handling strings in a zero-based index system, as well as basic input/output operations.",
        "program": "lonst = str(input())\nm = int(input())\nn = int(input())\nprint(lonst[m:n])",
        "error_desc": "No error."
    },
    {
        "problem_id": "1311127634034941952",
        "question": "Given two integers ranging from `[0,63]`, find their binary sum, with each binary number represented using 8 bits.\n\n### Input Format:\n\nInput one integer on one line and another integer on the next line.\n\n### Output Format:\n\nOutput their binary sum.\n\n### Sample Input:\n\nHere is a set of inputs. For example:\n\n```in\n5\n7\n```\n\n### Sample Output:\n\nHere is the corresponding output. For example:\n\n```out\n00000101\n00000111\n--------\n00001100\n```",
        "desc": "This problem tests the understanding of string manipulation, binary representation of integers, and formatted output in Python. Students are required to convert integers to 8-bit binary strings, perform a binary addition, and format the output. It evaluates the ability to use string formatting and binary operations for clear and correct representation.",
        "program": "a = int(input())\nb = int(input())\nprint('{:08b}'.format(a))\nprint('{:08b}'.format(b))\nprint('--------')\nprint('{:08b}'.format(a+b))",
        "error_desc": "No error."
    },
    {
        "problem_id": "1185070395613466624",
        "question": "Determine whether a positive integer is a perfect number. Definition of a perfect number: A number is considered a perfect number if the sum of all its factors (including 1) is equal to the number itself. For example, 6=1+2+3, where 6 is a perfect number.\n\n### Input Format:\n\nFor example: Input a positive integer 6\n\n### Output Format:\n\nOutput:\n\n6=1+2+3\n\n### Sample Input:\n\nHere is a set of input. For example:\n\n```in\n6\n```\n\n### Sample Output:\n\nHere is the corresponding output. For example:\n\n```out\n6=1+2+3\n```\n\n### Sample Input:\n\nHere is a set of input. For example:\n\n```in\n28\n```\n\n### Sample Output:\n\nHere is the corresponding output. For example:\n\n```out\n28=1+2+4+7+14\n```",
        "desc": "This problem tests the ability to use loops, particularly the `for` loop, to traverse a range of numbers to find factors of an input integer. It requires understanding of how to correctly accumulate these factors and compare their sum to the original number. Solving this problem also demonstrates competency in basic conditional statements and string formatting for output.",
        "program": "l = input().split(' ')\navg = float(0)\nfor i in l:\n    avg += len(i)\nprint(len(l), end=',')\nprint('%.2f'%(avg/len(l)))",
        "error_desc": "1. Misunderstanding of the problem: The student's code attempts to read input, split it by spaces, and calculate the average length of each part, which is unrelated to the task of determining a perfect number.\n2. Incorrect input handling: The code incorrectly assumes multiple inputs and splits them by spaces, while the task requires reading a single positive integer.\n3. Logical error: The code doesn't calculate factors of the input number, nor check if their sum equals the number.\n4. Output format error: The output format should be \"number=factor1+factor2+...\" but the student's code outputs \"number of parts, average length\" like \"3,2.00\", which doesn't match the required format."
    },
    {
        "problem_id": "1233716605972819968",
        "question": "Determine whether two strings, composed of uppercase and lowercase letters and spaces, are equal when case and spaces are ignored.\n\n### Input Format:\n\nTwo lines, each containing a string. If the two strings are equal, output YES; otherwise, output NO.\n\n### Output Format:\n\nPlease describe the output format here. For example: For each set of inputs, output the value of A+B on one line.\n\n### Input Example:\n\nExample 1\n```in\na A bb BB ccc CCC\nAa BBbb CCCccc\n```\n\nExample 2\n```in\na A bb BB ccc CCCa\nAa BBbb CCCccc\n```\n\n### Output Example:\n\nExample 1\n```out\nYES\n```\n\nExample 2\n```out\nNO\n```",
        "desc": "This question tests knowledge of string manipulation, including converting strings to a uniform format by removing spaces and changing to lowercase (or uppercase) for comparison. It requires students to demonstrate the ability to process and compare strings by handling case insensitivity and ignoring whitespace. The task evaluates problem-solving skills and proficiency in using Python string methods such as `str.replace()` and `str.lower()`.",
        "program": "a=input()\na=list(a)\nb=input()\nb=list(b)\nnum1=0\nnum2=0\nsum1=0\nsum2=0\nfor i in a:\n    asc=ord(i)\n    if asc!=32:\n        if asc>=97:\n            asc=asc-32\n        sum1=sum1+asc\n        num1+=1\nfor n in b:\n    asc=ord(n)\n    if asc!=32:\n        if asc>=97:\n            asc=asc-32\n        sum2=sum2+asc\n        num2+=1\nif sum1==sum2 and num1==num2:\n    print(\"YES\")\nelse:\n    print((\"NO\"))",
        "error_desc": "No error."
    },
    {
        "problem_id": "1041850068547989504",
        "question": "Echo Worm will repeat everything it hears. Please write a program to act like an echo worm, outputting exactly what it receives.\n\n### Input Format:\n\nOne line of text\n\n### Output Format:\n\nOne line of text\n\n### Input Example:\n\n```in\nHello\n```\n\n### Output Example:\n\n```out\nHello\n```",
        "desc": "This problem tests basic input and output functionality in Python using `input()` and `print()` functions. It evaluates a student's ability to correctly handle user input and produce the corresponding output without any alteration. The task requires fundamental knowledge of Python syntax and understanding of I/O operations.",
        "program": "x = int(input())\nprint(oct(x),end=\"  \")\nprint(hex(x),end=\"\")​print(oct(x),end=\"  \")\nprint(hex(x),end=\"\")",
        "error_desc": "1. The code attempts to convert the input into an integer using `int(input())`, which causes a `ValueError` if the input is not a valid integer.\n2. The intended output is to echo the input, but the code incorrectly converts numbers to octal and hexadecimal formats instead.\n3. A syntax error occurs where two `print` statements are not properly separated, causing a `SyntaxError`."
    },
    {
        "problem_id": "1370007557804187648",
        "question": "The problem requires reading a list composed of elements of any type and counting the number of numeric type elements (including int type, float type, complex type) in the list. Do not count data within nested elements.\n\n### Input Format:\n\nInput a list composed of elements of any type.\n\n### Output Format:\n\nOutput the number of numeric type elements in the list, including int type, float type, and complex type.\n\n### Input Example:\n\nAn example of input is given here. For instance:\n\n```in\n[\"Python\", 10, 20, \"Java\", 3 + 4j, False, 2.17, (10, 20)]\n```\n\n### Output Example:\n\nThe corresponding output is given here. For instance:\n\n```out\n4\n```",
        "desc": "This problem tests the student's understanding of iterating over list elements and type checking in Python. It requires knowledge of basic data structures, data types, and how to use conditions to filter desired elements. The task assesses the ability to apply logical reasoning and utilize Python built-in functions like `isinstance()` for type identification.",
        "program": "file = open('yzy.txt', 'r', encoding='utf-8')\nprint(file.read())\nfile.close()\n\nfile = open('yzy.txt', 'r', encoding='utf-8')\nprint(file.readline())\nprint(file.readline())\nprint(file.readline())\nprint(file.readline())\nfile.close()",
        "error_desc": "1. The student's code attempts to open and read a file named 'yzy.txt', instead of reading from standard input as required by the problem.\n2. The student's code does not perform any operations to count the number of numeric elements in the list.\n3. The code opens the 'yzy.txt' file twice, which is unnecessary and increases the likelihood of errors."
    }
]